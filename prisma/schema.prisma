generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NEXT_PUBLIC_DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  clerkUserId     String           @unique
  email           String           @unique
  name            String?
  imageUrl        String?
  industry        String?
  industryInsight IndustryInsight? @relation(fields: [industry], references: [industry])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  bio        String?
  experience Int?

  skills           String[]
  assessments      Assessment[]
  resume           Resume?
  coverLetter      CoverLetter[]
  courseList       CourseList[]
  interviewDetails InterviewDetails[]
}

model Assessment {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  quizScore      Float
  questions      Json[]
  category       String
  improvementTip String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

model Resume {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  content   String   @db.Text
  atsScore  Float?
  feedback  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CoverLetter {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  content        String
  jobDescription String?
  companyName    String
  jobTitle       String
  status         String   @default("draft")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

model IndustryInsight {
  id       String @id @default(cuid())
  industry String @unique

  users User[]

  salaryRanges Json[]

  growthRate  Float
  demandLevel DemandLevel
  topSkills   String[]

  marketOutlook MarketOutlook
  keyTrends     String[]

  recommendedSkills String[]

  lastUpdated DateTime @default(now())
  nextUpdate  DateTime

  @@index([industry])
}

model CourseList {
  id           String   @id @default(cuid())
  name         String
  category     String
  level        String
  courseOutput Json
  createdAt    DateTime @default(now())
  userId       String
  includeVideo String   @default("No")
  isPublished  String   @default("No")

  user User @relation(fields: [userId], references: [id])

  chapters Chapter[]

  @@index([userId])
}

model Chapter {
  id        String  @id @default(cuid())
  courseId  String
  chapterId Int
  content   Json
  videoId   String?

  course CourseList @relation(fields: [courseId], references: [id])

  @@index([courseId])
}

model InterviewDetails {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  jobPosition    String
  jobDescription String
  duration       String
  type           String[]
  questionList   Json

  userId String
  user   User   @relation(fields: [userId], references: [id])

  interviewFeedback InterviewFeedback?

  @@index([userId])
}

model InterviewFeedback {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  technicalSkills Int
  communication   Int
  problemSolving  Int
  experience      Int

  summary        String
  recommendation String
  reason         String

   userName  String
  userEmail String

  interviewId String @unique
  interview   InterviewDetails @relation(fields: [interviewId], references: [id])

  @@index([interviewId])
}


enum DemandLevel {
  HIGH
  MEDIUM
  LOW
}

enum MarketOutlook {
  POSITIVE
  NEUTRAL
  NEGATIVE
}
